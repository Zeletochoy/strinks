"""Add created_at to Offering table for tracking new arrivals

Revision ID: de85214d9939
Revises: 1c1c021b2804
Create Date: 2025-08-18 00:30:57.115150

"""

from collections.abc import Sequence

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "de85214d9939"
down_revision: str | Sequence[str] | None = "1c1c021b2804"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("beers", schema=None) as batch_op:
        batch_op.alter_column("brewery_id", existing_type=sa.INTEGER(), nullable=False)

    # Add created_at column to offerings table, defaulting to updated_at value
    with op.batch_alter_table("offerings", schema=None) as batch_op:
        batch_op.add_column(sa.Column("created_at", sa.DateTime(timezone=True), nullable=True))

    # Copy updated_at values to created_at for existing rows
    op.execute("UPDATE offerings SET created_at = updated_at WHERE created_at IS NULL")

    # Make created_at NOT NULL after populating it
    with op.batch_alter_table("offerings", schema=None) as batch_op:
        batch_op.alter_column("created_at", nullable=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("beers", schema=None) as batch_op:
        batch_op.alter_column("brewery_id", existing_type=sa.INTEGER(), nullable=True)

    # Remove created_at column from offerings table
    with op.batch_alter_table("offerings", schema=None) as batch_op:
        batch_op.drop_column("created_at")

    # ### end Alembic commands ###
